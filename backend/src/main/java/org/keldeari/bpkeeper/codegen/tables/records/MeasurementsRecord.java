/*
 * This file is generated by jOOQ.
 */
package org.keldeari.bpkeeper.codegen.tables.records;


import java.time.OffsetDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;
import org.keldeari.bpkeeper.codegen.tables.Measurements;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MeasurementsRecord extends UpdatableRecordImpl<MeasurementsRecord> implements Record7<Long, Long, Short, Short, Short, OffsetDateTime, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.measurements.entry_id</code>.
     */
    public void setEntryId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.measurements.entry_id</code>.
     */
    public Long getEntryId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.measurements.user_id</code>.
     */
    public void setUserId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.measurements.user_id</code>.
     */
    public Long getUserId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.measurements.pressure_sys</code>.
     */
    public void setPressureSys(Short value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.measurements.pressure_sys</code>.
     */
    public Short getPressureSys() {
        return (Short) get(2);
    }

    /**
     * Setter for <code>public.measurements.pressure_dia</code>.
     */
    public void setPressureDia(Short value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.measurements.pressure_dia</code>.
     */
    public Short getPressureDia() {
        return (Short) get(3);
    }

    /**
     * Setter for <code>public.measurements.pulse</code>.
     */
    public void setPulse(Short value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.measurements.pulse</code>.
     */
    public Short getPulse() {
        return (Short) get(4);
    }

    /**
     * Setter for <code>public.measurements.datetime</code>.
     */
    public void setDatetime(OffsetDateTime value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.measurements.datetime</code>.
     */
    public OffsetDateTime getDatetime() {
        return (OffsetDateTime) get(5);
    }

    /**
     * Setter for <code>public.measurements.note</code>.
     */
    public void setNote(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.measurements.note</code>.
     */
    public String getNote() {
        return (String) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, Short, Short, Short, OffsetDateTime, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<Long, Long, Short, Short, Short, OffsetDateTime, String> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Measurements.MEASUREMENTS.ENTRY_ID;
    }

    @Override
    public Field<Long> field2() {
        return Measurements.MEASUREMENTS.USER_ID;
    }

    @Override
    public Field<Short> field3() {
        return Measurements.MEASUREMENTS.PRESSURE_SYS;
    }

    @Override
    public Field<Short> field4() {
        return Measurements.MEASUREMENTS.PRESSURE_DIA;
    }

    @Override
    public Field<Short> field5() {
        return Measurements.MEASUREMENTS.PULSE;
    }

    @Override
    public Field<OffsetDateTime> field6() {
        return Measurements.MEASUREMENTS.DATETIME;
    }

    @Override
    public Field<String> field7() {
        return Measurements.MEASUREMENTS.NOTE;
    }

    @Override
    public Long component1() {
        return getEntryId();
    }

    @Override
    public Long component2() {
        return getUserId();
    }

    @Override
    public Short component3() {
        return getPressureSys();
    }

    @Override
    public Short component4() {
        return getPressureDia();
    }

    @Override
    public Short component5() {
        return getPulse();
    }

    @Override
    public OffsetDateTime component6() {
        return getDatetime();
    }

    @Override
    public String component7() {
        return getNote();
    }

    @Override
    public Long value1() {
        return getEntryId();
    }

    @Override
    public Long value2() {
        return getUserId();
    }

    @Override
    public Short value3() {
        return getPressureSys();
    }

    @Override
    public Short value4() {
        return getPressureDia();
    }

    @Override
    public Short value5() {
        return getPulse();
    }

    @Override
    public OffsetDateTime value6() {
        return getDatetime();
    }

    @Override
    public String value7() {
        return getNote();
    }

    @Override
    public MeasurementsRecord value1(Long value) {
        setEntryId(value);
        return this;
    }

    @Override
    public MeasurementsRecord value2(Long value) {
        setUserId(value);
        return this;
    }

    @Override
    public MeasurementsRecord value3(Short value) {
        setPressureSys(value);
        return this;
    }

    @Override
    public MeasurementsRecord value4(Short value) {
        setPressureDia(value);
        return this;
    }

    @Override
    public MeasurementsRecord value5(Short value) {
        setPulse(value);
        return this;
    }

    @Override
    public MeasurementsRecord value6(OffsetDateTime value) {
        setDatetime(value);
        return this;
    }

    @Override
    public MeasurementsRecord value7(String value) {
        setNote(value);
        return this;
    }

    @Override
    public MeasurementsRecord values(Long value1, Long value2, Short value3, Short value4, Short value5, OffsetDateTime value6, String value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MeasurementsRecord
     */
    public MeasurementsRecord() {
        super(Measurements.MEASUREMENTS);
    }

    /**
     * Create a detached, initialised MeasurementsRecord
     */
    public MeasurementsRecord(Long entryId, Long userId, Short pressureSys, Short pressureDia, Short pulse, OffsetDateTime datetime, String note) {
        super(Measurements.MEASUREMENTS);

        setEntryId(entryId);
        setUserId(userId);
        setPressureSys(pressureSys);
        setPressureDia(pressureDia);
        setPulse(pulse);
        setDatetime(datetime);
        setNote(note);
    }
}
